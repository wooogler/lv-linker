{"version":3,"sources":["hooks/useLogRows.ts","components/LogTable.tsx","components/LogPlayer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["flattenObject","ob","toReturn","i","hasOwnProperty","flatObject","x","getlogRows","logRaws","map","log","index","_id","datumType","timestamp","value","replaceAll","JSON","parse","e","console","useLogRows","fileName","useState","logData","setLogData","logColumns","useMemo","reduce","acc","row","keys","Object","_","union","useEffect","a","readRemoteFile","worker","complete","results","data","logRows","res","ac","logs","item","assign","download","getLogs","dayjs","extend","localizedFormat","Styles","styled","div","CustomRow","passed","selected","CustomCol","LogTable","sec","sync","start","setSelectedTimestamp","setSync","playerRef","selectedTimestamp","originalLogColumns","logState","setLogState","showColumnIndex","setShowColumnIndex","showRowIndex","setShowRowIndex","initShowColumnIndex","Array","length","fill","showColumns","filter","pick","sort","b","parseInt","rowId","setRowId","onClickRow","useCallback","current","seekTo","col","setCol","count","setCount","originalCountCol","entries","countBy","selectedCount","find","originalSelectedCount","val","includes","lookup","undefined","Error","checked","total","onClickCol","CellRenderer","columnIndex","key","rowIndex","style","column","className","onClick","toString","format","passedIndex","setPassedIndex","findIndex","onClickFilter","prev","onSelectAllColumns","target","indeterminate","onSelectAllValues","valueList","setValueList","columnList","setColumnList","onChangeSearchColumn","toLowerCase","onChangeSearchValue","showColumnIndexExceptId","height","width","rowHeight","fixedColumnCount","fixedRowCount","cellRenderer","border","styleTopLeftGrid","borderBottom","borderRight","fontWeight","rowCount","Boolean","columnCount","columnWidth","scrollToRow","size","onChange","every","some","stopPropagation","onChangeColumns","LogPlayer","url","setSec","setStart","playedSec","setPlayedSec","controls","onProgress","Math","floor","playedSeconds","progressInterval","ref","App","useRef","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1a1e232.chunk.js","sourcesContent":["import _ from \"lodash\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { readRemoteFile } from \"react-papaparse\";\n\nfunction flattenObject(ob: any) {\n  var toReturn: any = {};\n\n  for (var i in ob) {\n    if (!ob.hasOwnProperty(i)) continue;\n\n    if (typeof ob[i] == \"object\" && ob[i] !== null) {\n      var flatObject = flattenObject(ob[i]);\n      for (var x in flatObject) {\n        if (!flatObject.hasOwnProperty(x)) continue;\n\n        toReturn[i + \"_\" + x] = flatObject[x];\n      }\n    } else {\n      toReturn[i] = ob[i];\n    }\n  }\n  return toReturn;\n}\n\nconst getlogRows = (logRaws: string[][]) =>\n  logRaws.map<{ [index: string]: string }>((log, index) => {\n    const _id = log[0];\n    const datumType = log[1];\n    const timestamp = log[5];\n    const value = log[8]?.replaceAll('\"\"', '\"').replaceAll(': \", ', ': \"\", ');\n    try {\n      return { timestamp, _id, datumType, ...flattenObject(JSON.parse(value)) };\n    } catch (e) {\n      console.log(e);\n      return { timestamp, _id, datumType };\n    }\n  });\n\nconst getColumns = (data: { [index: string]: string }[]) => {\n  return data.reduce<string[]>((acc, row) => {\n    const keys = Object.keys(row);\n    return _.union(acc, keys);\n  }, []);\n};\n\nfunction useLogRows(fileName: string) {\n  const [logData, setLogData] = useState<{ [index: string]: string }[]>([]);\n  const logColumns = useMemo(() => getColumns(logData), [logData]);\n  useEffect(() => {\n    async function getLogs() {\n      readRemoteFile<string[]>(`http://localhost:3000/logs/${fileName}`, {\n        worker: true,\n        complete: function (results) {\n          const logRaws = results.data;\n          const logRows = getlogRows(logRaws);\n          const logColumns = logRows.reduce<string[]>((acc, row) => {\n            const keys = Object.keys(row);\n            return _.union(acc, keys);\n          }, []);\n          const res = logColumns.reduce(\n            (ac, a) => ({ ...ac, [a]: \"empty\" }),\n            {}\n          );\n          const logs = logRows.map((item) => Object.assign({}, res, item));\n          setLogData(logs);\n        },\n        download: true,\n      });\n    }\n    getLogs();\n  }, [fileName]);\n\n  return { logData, logColumns };\n}\n\nexport default useLogRows;\n","import React, { ReactElement, useCallback, useEffect, useState } from \"react\";\nimport { AutoSizer, GridCellRenderer, MultiGrid } from \"react-virtualized\";\nimport dayjs from \"dayjs\";\nimport localizedFormat from \"dayjs/plugin/localizedFormat\";\nimport useLogRows from \"../hooks/useLogRows\";\nimport styled from \"styled-components\";\nimport _ from \"lodash\";\nimport { Checkbox, Input } from \"antd\";\nimport { CheckboxChangeEvent } from \"antd/lib/checkbox\";\n\ninterface Props {\n  fileName: string;\n  sec: number;\n  sync: number;\n  start: number;\n  selectedTimestamp: number;\n  setSync: React.Dispatch<React.SetStateAction<number>>;\n  setSelectedTimestamp: React.Dispatch<React.SetStateAction<number>>;\n  playerRef: any;\n}\n\ninterface ValueCount {\n  value: string;\n  count: number;\n  checked: boolean;\n  total: number;\n}\n\ndayjs.extend(localizedFormat);\n\nfunction LogTable({\n  fileName,\n  sec,\n  sync,\n  start,\n  setSync,\n  setSelectedTimestamp,\n  selectedTimestamp,\n  playerRef,\n}: Props): ReactElement {\n  const { logData, logColumns: originalLogColumns } = useLogRows(fileName);\n  const [logState, setLogState] = useState<\n    {\n      [index: string]: string;\n    }[]\n  >();\n  const [showColumnIndex, setShowColumnIndex] = useState<boolean[]>([]);\n  const [showRowIndex, setShowRowIndex] = useState<boolean[]>([]);\n  useEffect(() => {\n    const initShowColumnIndex = new Array(originalLogColumns.length).fill(true);\n    // .map((_, index) => (index === 1 ? false : true));\n    console.log(initShowColumnIndex);\n    setShowColumnIndex(initShowColumnIndex);\n    setShowRowIndex(new Array(logData.length).fill(true));\n  }, [logData.length, originalLogColumns.length]);\n  useEffect(() => {\n    const showColumns = originalLogColumns.filter((_, i) => showColumnIndex[i]);\n    setLogState(\n      logData\n        .map((item) => _.pick(item, showColumns))\n        .filter((_, i) => showRowIndex[i])\n        .sort((a, b) => parseInt(a.timestamp) - parseInt(b.timestamp))\n    );\n  }, [logData, originalLogColumns, showColumnIndex, showRowIndex]);\n\n  const [rowId, setRowId] = useState(\"\");\n\n  const onClickRow = useCallback(\n    (row: { [index: string]: string }) => {\n      setRowId(row?._id);\n      const timestamp = parseInt(row?.timestamp);\n      setSelectedTimestamp(timestamp);\n      playerRef.current.seekTo((start + timestamp - sync) / 1000, \"seconds\");\n    },\n    [playerRef, setSelectedTimestamp, start, sync]\n  );\n\n  const [col, setCol] = useState(\"\");\n  const [count, setCount] = useState<ValueCount[] | undefined>([]);\n\n  useEffect(() => {\n    const originalCountCol = originalLogColumns.map((col) => ({\n      col,\n      count: Object.entries(_.countBy(logData?.map((item) => item[col]))),\n    }));\n    const countCol = originalLogColumns.map((col) => ({\n      col,\n      count: Object.entries(_.countBy(logState?.map((item) => item[col]))),\n    }));\n    const selectedCount = countCol.find((item) => item.col === col)?.count;\n    const originalSelectedCount = originalCountCol.find(\n      (item) => item.col === col\n    )?.count;\n\n    setCount(\n      originalSelectedCount?.map((item) => {\n        if (selectedCount?.map((val) => val[0]).includes(item[0])) {\n          const lookup = selectedCount.find((val) => val[0] === item[0]);\n          if (lookup === undefined) {\n            throw new Error(\"no lookup\");\n          }\n          const count = lookup[1];\n          if (count === item[1]) {\n            return {\n              value: item[0],\n              count: count,\n              checked: true,\n              total: item[1],\n            };\n          }\n          return {\n            value: item[0],\n            count: count,\n            checked: false,\n            total: item[1],\n          };\n        } else {\n          return { value: item[0], count: 0, checked: false, total: item[1] };\n        }\n      })\n    );\n  }, [col, logData, logState, originalLogColumns]);\n\n  const onClickCol = useCallback(\n    (e: React.MouseEvent<HTMLDivElement, MouseEvent>, col: string) => {\n      if (col === \"timestamp\" || col === \"_id\" || col === \"extra_eventTime\")\n        return;\n      // e.stopPropagation();\n      setCol(col);\n    },\n    []\n  );\n\n  const CellRenderer: GridCellRenderer = ({\n    columnIndex,\n    key,\n    rowIndex,\n    style,\n  }) => {\n    if (logState) {\n      const logColumns = originalLogColumns.filter(\n        (_, index) => showColumnIndex[index]\n      );\n      const column = logColumns[columnIndex];\n      const row = logState[rowIndex];\n      if (rowIndex === 0) {\n        return (\n          <CustomCol key={key} style={style} className=\"cell\">\n            {column}\n          </CustomCol>\n        );\n      }\n\n      return (\n        <CustomRow\n          key={key}\n          style={style}\n          className=\"cell\"\n          passed={sec + sync - start >= parseInt(row?.timestamp)}\n          selected={row?._id === rowId}\n          onClick={() => onClickRow(row)}\n        >\n          {/* {row && row[column] && columnIndex === 0\n            ? dayjs(parseInt(row[column])).format(\"L LT\")\n            : row[column].toString()} */}\n          {columnIndex !== 0\n            ? row && row[column] && row[column].toString()\n            : row && dayjs(parseInt(row[column])).format(\"MM/DD hh:mm:ss.SSS\")}\n        </CustomRow>\n      );\n    }\n  };\n  const [passedIndex, setPassedIndex] = useState(0);\n  useEffect(() => {\n    const rowIndex = logState\n      ? logState.findIndex(\n          (item) => sec + sync - start <= parseInt(item?.timestamp)\n        )\n      : 0;\n    setPassedIndex(rowIndex + 5);\n  }, [logState, sec, start, sync]);\n\n  const onChangeColumns = (\n    e: React.MouseEvent<HTMLElement, MouseEvent>,\n    index: number\n  ) => {\n    e.stopPropagation();\n    setShowColumnIndex((prev) =>\n      prev.map((item, i) => {\n        return index === i ? !item : item;\n      })\n    );\n  };\n\n  const onClickFilter = useCallback(\n    (value: string, checked: boolean) => {\n      if (checked) {\n        setShowRowIndex((prev) =>\n          prev.map((item, i) => {\n            if (item === true) {\n              return logData[i][col] !== value;\n            } else {\n              return item;\n            }\n          })\n        );\n      } else {\n        setShowRowIndex((prev) =>\n          prev.map((item, i) => {\n            if (item === false) {\n              return logData[i][col] === value;\n            } else {\n              return item;\n            }\n          })\n        );\n      }\n    },\n    [col, logData]\n  );\n\n  const onSelectAllColumns = useCallback((e: CheckboxChangeEvent) => {\n    if (!e.target.checked || e.target.indeterminate) {\n      setShowColumnIndex((prev) => prev.map(() => false));\n    } else {\n      setShowColumnIndex((prev) => prev.map(() => true));\n    }\n  }, []);\n\n  const onSelectAllValues = useCallback((e: CheckboxChangeEvent) => {\n    if (!e.target.checked || e.target.indeterminate) {\n      setShowRowIndex((prev) => prev.map(() => false));\n    } else {\n      setShowRowIndex((prev) => prev.map(() => true));\n    }\n  }, []);\n\n  const [valueList, setValueList] = useState<ValueCount[] | undefined>([]);\n  const [columnList, setColumnList] = useState<string[]>([]);\n\n  useEffect(() => {\n    setValueList(count);\n    setColumnList(originalLogColumns);\n  }, [count, originalLogColumns]);\n\n  const onChangeSearchColumn: React.ChangeEventHandler<HTMLInputElement> =\n    useCallback(\n      (e) => {\n        setColumnList(\n          originalLogColumns.filter((item) =>\n            item.toLowerCase().includes(e.target.value.toLowerCase())\n          )\n        );\n      },\n      [originalLogColumns]\n    );\n\n  const onChangeSearchValue: React.ChangeEventHandler<HTMLInputElement> =\n    useCallback(\n      (e) => {\n        setValueList(\n          count?.filter((item) =>\n            item.value.toLowerCase().includes(e.target.value.toLowerCase())\n          )\n        );\n      },\n      [count]\n    );\n  const showColumnIndexExceptId = showColumnIndex.filter((_, i) => i !== 1);\n\n  return (\n    <div className=\"w-full h-screen\">\n      {/* <div>\n        sec:{sec}, sync: {sync}, timestamp: {selectedTimestamp}, start: {start},\n        sec+sync: {sec + sync}\n      </div> */}\n      <Styles>\n        <AutoSizer>\n          {({ height, width }) => (\n            <MultiGrid\n              height={height}\n              rowHeight={30}\n              width={width}\n              fixedColumnCount={1}\n              fixedRowCount={1}\n              cellRenderer={CellRenderer}\n              style={{\n                border: \"1px solid #ddd\",\n              }}\n              styleTopLeftGrid={{\n                borderBottom: \"2px solid #aaa\",\n                borderRight: \"2px solid #aaa\",\n                fontWeight: \"bold\",\n              }}\n              rowCount={showRowIndex.filter(Boolean).length}\n              columnCount={showColumnIndex.filter(Boolean).length}\n              columnWidth={150}\n              scrollToRow={passedIndex}\n            />\n          )}\n        </AutoSizer>\n      </Styles>\n      <div className=\"flex\">\n        <div className=\"flex flex-col ml-4\">\n          <div className=\"text-lg font-bold\">Show Columns</div>\n          <Input size=\"small\" onChange={onChangeSearchColumn} />\n          <Checkbox\n            checked={showColumnIndexExceptId.every((item) => item === true)}\n            indeterminate={\n              !showColumnIndexExceptId.every((item) => item === true) &&\n              showColumnIndexExceptId.some((item) => item === true)\n            }\n            onChange={onSelectAllColumns}\n            className=\"p-1\"\n          >\n            Select All\n          </Checkbox>\n          <div className=\"h-60 overflow-auto\">\n            {columnList.map((column, index) => {\n              return (\n                <div\n                  className={`flex p-1 ${\n                    column !== \"timestamp\" && \"cursor-pointer hover:bg-gray-200\"\n                  } ${column === col && \"bg-blue-200\"}`}\n                  onClick={(e) => onClickCol(e, column)}\n                >\n                  <Checkbox\n                    onClick={(e) => onChangeColumns(e, index)}\n                    checked={showColumnIndex[index]}\n                    key={index}\n                  />\n                  <div className=\"w-36 pl-2\">{column}</div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n        {col !== \"\" && (\n          <div className=\"flex flex-col ml-4\">\n            <div className=\"text-lg font-bold\">Column Filter - {col}</div>\n            <Input size=\"small\" onChange={onChangeSearchValue} />\n            <div className=\"p-1\">\n              <Checkbox\n                checked={count\n                  ?.map((item) => item.checked)\n                  .every((item) => item === true)}\n                indeterminate={\n                  !count\n                    ?.map((item) => item.checked)\n                    .every((item) => item === true) &&\n                  count\n                    ?.map((item) => item.checked)\n                    .some((item) => item === true)\n                }\n                onChange={onSelectAllValues}\n              >\n                Select All\n              </Checkbox>\n            </div>\n            <div className=\"h-60 overflow-auto\">\n              {valueList\n                ?.sort((a, b) => b.total - a.total)\n                .map((item) => {\n                  return (\n                    <div className=\"p-1\">\n                      <Checkbox\n                        checked={item.checked}\n                        indeterminate={item.count !== 0 && !item.checked}\n                        onClick={() => onClickFilter(item.value, item.checked)}\n                        key={item.value}\n                      >\n                        {item.value} ({item.count}/{item.total})\n                      </Checkbox>\n                    </div>\n                  );\n                })}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nconst Styles = styled.div`\n  width: 100%;\n  height: 60%;\n  margin: 1rem;\n  .cell {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    :hover {\n      overflow: visible;\n      white-space: normal;\n    }\n  }\n`;\n\nconst CustomRow = styled.div<{ passed: boolean; selected: boolean }>`\n  ${({ passed }) =>\n    passed &&\n    `\n    background: yellow;\n  `}\n  ${({ selected }) =>\n    selected &&\n    `\n    background: red;\n  `}\n`;\n\nconst CustomCol = styled.div``;\n\nexport default LogTable;\n","import { Button } from \"antd\";\nimport React, { ReactElement, useCallback, useState } from \"react\";\nimport ReactPlayer from \"react-player\";\n\ninterface Props {\n  url: string;\n  setSec: React.Dispatch<React.SetStateAction<number>>;\n  setSync: React.Dispatch<React.SetStateAction<number>>;\n  setStart: React.Dispatch<React.SetStateAction<number>>;\n  selectedTimestamp: number;\n  playerRef: React.LegacyRef<ReactPlayer> | undefined;\n}\n\ninterface Progress {\n  played: number;\n  playedSeconds: number;\n  loaded: number;\n  loadedSeconds: number;\n}\n\nfunction LogPlayer({\n  url,\n  setSec,\n  setSync,\n  setStart,\n  selectedTimestamp,\n  playerRef,\n}: Props): ReactElement {\n  const [playedSec, setPlayedSec] = useState(0);\n  const onProgress = (e: Progress) => {\n    setSec(Math.floor(e.playedSeconds * 1000));\n    setPlayedSec(Math.floor(e.playedSeconds * 1000));\n  };\n  const onClickSync = useCallback(() => {\n    setSync(selectedTimestamp);\n    setStart(playedSec);\n  }, [playedSec, selectedTimestamp, setStart, setSync]);\n  return (\n    <div className=\"h-screen w-full p-4\">\n      <ReactPlayer\n        url={url}\n        controls={true}\n        width=\"100%\"\n        height=\"100%\"\n        onProgress={onProgress}\n        progressInterval={10}\n        ref={playerRef}\n      />\n      {/* <div>{playedSec}</div> */}\n      {/* <Button onClick={onClickSync}>Sync</Button> */}\n    </div>\n  );\n}\n\nexport default LogPlayer;\n","import React, { useRef, useState } from \"react\";\n\nimport LogTable from \"./components/LogTable\";\nimport \"antd/dist/antd.css\";\nimport LogPlayer from \"./components/LogPlayer\";\nimport ReactPlayer from \"react-player\";\n\nfunction App() {\n  const [sync, setSync] = useState<number>(1629813828796);\n  const [sec, setSec] = useState<number>(0);\n  const [start, setStart] = useState<number>(6835);\n  const [selectedTimestamp, setSelectedTimestamp] = useState<number>(0);\n  const playerRef = useRef() as React.LegacyRef<ReactPlayer> | undefined;\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <div className=\"w-2/3 h-screen\">\n        <LogTable\n          fileName=\"20.4.csv\"\n          sec={sec}\n          sync={sync}\n          setSelectedTimestamp={setSelectedTimestamp}\n          playerRef={playerRef}\n          setSync={setSync}\n          selectedTimestamp={selectedTimestamp}\n          start={start}\n        />\n      </div>\n      <div className=\"w-1/3 h-screen\">\n        <LogPlayer\n          url=\"videos/P020_10.webm\"\n          setSec={setSec}\n          setSync={setSync}\n          setStart={setStart}\n          selectedTimestamp={selectedTimestamp}\n          playerRef={playerRef}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}